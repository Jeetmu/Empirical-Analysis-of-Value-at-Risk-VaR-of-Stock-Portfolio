{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2201012",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:44.016530Z",
     "iopub.status.busy": "2025-03-09T12:58:44.016010Z",
     "iopub.status.idle": "2025-03-09T12:58:44.923724Z",
     "shell.execute_reply": "2025-03-09T12:58:44.922538Z"
    },
    "papermill": {
     "duration": 0.917145,
     "end_time": "2025-03-09T12:58:44.925712",
     "exception": false,
     "start_time": "2025-03-09T12:58:44.008567",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f1f2bb2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:44.938112Z",
     "iopub.status.busy": "2025-03-09T12:58:44.937626Z",
     "iopub.status.idle": "2025-03-09T12:58:44.941706Z",
     "shell.execute_reply": "2025-03-09T12:58:44.940809Z"
    },
    "papermill": {
     "duration": 0.011899,
     "end_time": "2025-03-09T12:58:44.943240",
     "exception": false,
     "start_time": "2025-03-09T12:58:44.931341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# pip install --upgrade yfinance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1a19602b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:44.955143Z",
     "iopub.status.busy": "2025-03-09T12:58:44.954725Z",
     "iopub.status.idle": "2025-03-09T12:58:48.391820Z",
     "shell.execute_reply": "2025-03-09T12:58:48.390822Z"
    },
    "papermill": {
     "duration": 3.44485,
     "end_time": "2025-03-09T12:58:48.393500",
     "exception": false,
     "start_time": "2025-03-09T12:58:44.948650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>AAPL</th>\n",
       "      <th>BAC</th>\n",
       "      <th>AXP</th>\n",
       "      <th>KO</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticker</th>\n",
       "      <th>AAPL</th>\n",
       "      <th>BAC</th>\n",
       "      <th>AXP</th>\n",
       "      <th>KO</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [(AAPL, AAPL), (BAC, BAC), (AXP, AXP), (KO, KO)]\n",
       "Index: []"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "\n",
    "stocks = ['AAPL', 'BAC', 'AXP', 'KO']\n",
    "df = pd.DataFrame()\n",
    "for stock in stocks:\n",
    "    df_stocks = yf.download(stock, start ='2011-12-20', end='2021-12-20')[['Close']]\n",
    "    df_stocks.rename(columns={'Close':stock}, inplace=True)\n",
    "    df = pd.concat([df, df_stocks], axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c29c2a96",
   "metadata": {
    "papermill": {
     "duration": 0.005459,
     "end_time": "2025-03-09T12:58:48.405105",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.399646",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Daily Return Rate of the 4 Stocks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8eca801a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.418232Z",
     "iopub.status.busy": "2025-03-09T12:58:48.417678Z",
     "iopub.status.idle": "2025-03-09T12:58:48.432169Z",
     "shell.execute_reply": "2025-03-09T12:58:48.431080Z"
    },
    "papermill": {
     "duration": 0.023043,
     "end_time": "2025-03-09T12:58:48.433949",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.410906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>AAPL</th>\n",
       "      <th>BAC</th>\n",
       "      <th>AXP</th>\n",
       "      <th>KO</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ticker</th>\n",
       "      <th>AAPL</th>\n",
       "      <th>BAC</th>\n",
       "      <th>AXP</th>\n",
       "      <th>KO</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [(AAPL, AAPL), (BAC, BAC), (AXP, AXP), (KO, KO)]\n",
       "Index: []"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_returns = df.pct_change()\n",
    "df_returns = df_returns.iloc[1:]\n",
    "df_returns.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de08b71c",
   "metadata": {
    "papermill": {
     "duration": 0.005918,
     "end_time": "2025-03-09T12:58:48.445948",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.440030",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "After getting the daily closing price changepercent of\n",
    "each stock in the portfolio, the next step is to create a\n",
    "portfolio of the four U.S stocks——Apple, Bank of\n",
    "America, American Express and Coca-Cola——selected\n",
    "according to the major heavy positions of Berkshire\n",
    "Hathaway listed in the 2021 Q2 report\n",
    "\n",
    "We have constructed a portfolio of four American\n",
    "stocks, and the weight of the portfolio is 1:1 to that is on\n",
    "the report. In this case, the initial investment amount of\n",
    "the simulated constructed portfolio is set as $1,000,000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a69a604d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.458813Z",
     "iopub.status.busy": "2025-03-09T12:58:48.458470Z",
     "iopub.status.idle": "2025-03-09T12:58:48.462770Z",
     "shell.execute_reply": "2025-03-09T12:58:48.461651Z"
    },
    "papermill": {
     "duration": 0.012776,
     "end_time": "2025-03-09T12:58:48.464582",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.451806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "weights = np.array([0.4147, 0.1442, 0.0855, 0.0739])\n",
    "ini_inves = 1000000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fabc1f8c",
   "metadata": {
    "papermill": {
     "duration": 0.005535,
     "end_time": "2025-03-09T12:58:48.476276",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.470741",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Var - Cov Matrix of the 4 Stocks\n",
    "\n",
    "Then combined with the daily return rate of the stock\n",
    "obtained in the previous step, we establish the variance -\n",
    "covariance (Var - Cov) matrix,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "89bc973f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.489694Z",
     "iopub.status.busy": "2025-03-09T12:58:48.489304Z",
     "iopub.status.idle": "2025-03-09T12:58:48.519574Z",
     "shell.execute_reply": "2025-03-09T12:58:48.518352Z"
    },
    "papermill": {
     "duration": 0.039,
     "end_time": "2025-03-09T12:58:48.521346",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.482346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py:520: RuntimeWarning: Mean of empty slice.\n",
      "  avg = a.mean(axis, **keepdims_kw)\n",
      "/usr/local/lib/python3.10/dist-packages/numpy/core/_methods.py:121: RuntimeWarning: invalid value encountered in divide\n",
      "  ret = um.true_divide(\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py:11211: RuntimeWarning: Degrees of freedom <= 0 for slice\n",
      "  base_cov = np.cov(mat.T, ddof=ddof)\n",
      "/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py:2748: RuntimeWarning: divide by zero encountered in divide\n",
      "  c *= np.true_divide(1, fact)\n",
      "/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py:2748: RuntimeWarning: invalid value encountered in multiply\n",
      "  c *= np.true_divide(1, fact)\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "      <th>AAPL</th>\n",
       "      <th>BAC</th>\n",
       "      <th>AXP</th>\n",
       "      <th>KO</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Ticker</th>\n",
       "      <th>AAPL</th>\n",
       "      <th>BAC</th>\n",
       "      <th>AXP</th>\n",
       "      <th>KO</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <th>Ticker</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AAPL</th>\n",
       "      <th>AAPL</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BAC</th>\n",
       "      <th>BAC</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AXP</th>\n",
       "      <th>AXP</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KO</th>\n",
       "      <th>KO</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Price        AAPL BAC AXP  KO\n",
       "Ticker       AAPL BAC AXP  KO\n",
       "Price Ticker                 \n",
       "AAPL  AAPL    NaN NaN NaN NaN\n",
       "BAC   BAC     NaN NaN NaN NaN\n",
       "AXP   AXP     NaN NaN NaN NaN\n",
       "KO    KO      NaN NaN NaN NaN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cov_matrix = df_returns.cov()\n",
    "cov_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a4ce18",
   "metadata": {
    "papermill": {
     "duration": 0.005816,
     "end_time": "2025-03-09T12:58:48.533483",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.527667",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "After running, the variance-covariance (Var - Cov)\n",
    "matrix, this enable us to calculate\n",
    "the standard deviation and mean return of the entire\n",
    "portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "aff10754",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.548228Z",
     "iopub.status.busy": "2025-03-09T12:58:48.547862Z",
     "iopub.status.idle": "2025-03-09T12:58:48.555826Z",
     "shell.execute_reply": "2025-03-09T12:58:48.554751Z"
    },
    "papermill": {
     "duration": 0.016768,
     "end_time": "2025-03-09T12:58:48.557569",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.540801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Price  Ticker\n",
       "AAPL   AAPL     NaN\n",
       "BAC    BAC      NaN\n",
       "AXP    AXP      NaN\n",
       "KO     KO       NaN\n",
       "dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# daily average return of the 4 stocks\n",
    "\n",
    "avg_rets = df_returns.mean()\n",
    "avg_rets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "83fa5abf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.571601Z",
     "iopub.status.busy": "2025-03-09T12:58:48.571247Z",
     "iopub.status.idle": "2025-03-09T12:58:48.581203Z",
     "shell.execute_reply": "2025-03-09T12:58:48.579878Z"
    },
    "papermill": {
     "duration": 0.018909,
     "end_time": "2025-03-09T12:58:48.582955",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.564046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the average return of the entire portfolio\n",
    "\n",
    "port_mean = np.dot(avg_rets, weights)\n",
    "port_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "df62625a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.597615Z",
     "iopub.status.busy": "2025-03-09T12:58:48.597225Z",
     "iopub.status.idle": "2025-03-09T12:58:48.605329Z",
     "shell.execute_reply": "2025-03-09T12:58:48.604215Z"
    },
    "papermill": {
     "duration": 0.017463,
     "end_time": "2025-03-09T12:58:48.607145",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.589682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# portfolio std deviation\n",
    "\n",
    "port_std = np.sqrt(weights.T.dot(cov_matrix).dot(weights))\n",
    "port_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9b9598c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.622602Z",
     "iopub.status.busy": "2025-03-09T12:58:48.622197Z",
     "iopub.status.idle": "2025-03-09T12:58:48.628614Z",
     "shell.execute_reply": "2025-03-09T12:58:48.627567Z"
    },
    "papermill": {
     "duration": 0.016485,
     "end_time": "2025-03-09T12:58:48.630559",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.614074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# average value of investment\n",
    "\n",
    "mean_investment = (1+port_mean) * ini_inves\n",
    "mean_investment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d7e5fb35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.646207Z",
     "iopub.status.busy": "2025-03-09T12:58:48.645836Z",
     "iopub.status.idle": "2025-03-09T12:58:48.652054Z",
     "shell.execute_reply": "2025-03-09T12:58:48.650860Z"
    },
    "papermill": {
     "duration": 0.015915,
     "end_time": "2025-03-09T12:58:48.653872",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.637957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# std deviation of the investment\n",
    "\n",
    "stdev_investment = ini_inves * port_std\n",
    "stdev_investment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a4255fc",
   "metadata": {
    "papermill": {
     "duration": 0.006818,
     "end_time": "2025-03-09T12:58:48.667608",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.660790",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Percentile Point Function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c49aca5",
   "metadata": {
    "papermill": {
     "duration": 0.006589,
     "end_time": "2025-03-09T12:58:48.680857",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.674268",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "we can estimate the\n",
    "portfolio's value at risk (VaR) with a 95% confidence\n",
    "interval by subtracting the value returned by the inverse\n",
    "cumulative distribution function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ab0b2eab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:48.695557Z",
     "iopub.status.busy": "2025-03-09T12:58:48.695162Z",
     "iopub.status.idle": "2025-03-09T12:58:49.895095Z",
     "shell.execute_reply": "2025-03-09T12:58:49.893726Z"
    },
    "papermill": {
     "duration": 1.210365,
     "end_time": "2025-03-09T12:58:49.897970",
     "exception": false,
     "start_time": "2025-03-09T12:58:48.687605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/scipy/stats/_distn_infrastructure.py:2239: RuntimeWarning: invalid value encountered in greater\n",
      "  cond0 = self._argcheck(*args) & (scale > 0) & (loc == loc)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conf_level1 =0.05\n",
    "from scipy.stats import norm\n",
    "\n",
    "cutoffl = norm.ppf(conf_level1, mean_investment, stdev_investment)\n",
    "cutoffl"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "539e7d33",
   "metadata": {
    "papermill": {
     "duration": 0.006621,
     "end_time": "2025-03-09T12:58:49.911621",
     "exception": false,
     "start_time": "2025-03-09T12:58:49.905000",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "If your initial investment was $1,000,000, a 5% probability exists that its value drops below 984,048.95 in the given time frame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bf4d6d1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:49.926644Z",
     "iopub.status.busy": "2025-03-09T12:58:49.926018Z",
     "iopub.status.idle": "2025-03-09T12:58:49.932345Z",
     "shell.execute_reply": "2025-03-09T12:58:49.931332Z"
    },
    "papermill": {
     "duration": 0.015848,
     "end_time": "2025-03-09T12:58:49.934101",
     "exception": false,
     "start_time": "2025-03-09T12:58:49.918253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_1dl = ini_inves - cutoffl\n",
    "var_1dl"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e57b181",
   "metadata": {
    "papermill": {
     "duration": 0.006707,
     "end_time": "2025-03-09T12:58:49.947923",
     "exception": false,
     "start_time": "2025-03-09T12:58:49.941216",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "So we get the value at risk of the portfolio based on\n",
    "the proportion of Berkshire Hathaway's major stock\n",
    "holdings: VaR = 15951.04. Here, we have a\n",
    "level of 95% confidence to say that our 1 million dollar portfolio will not lose more than $16,000 in a single\n",
    "trading day\n",
    "\n",
    "When it comes to a larger time horizon like the VaR\n",
    "over n days, it can simply take the 1-day VaR and\n",
    "multiply it by the square root of the time period (this is\n",
    "because the standard deviation of stock returns will\n",
    "increase with the square root of time)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95b58b4a",
   "metadata": {
    "papermill": {
     "duration": 0.00681,
     "end_time": "2025-03-09T12:58:49.961671",
     "exception": false,
     "start_time": "2025-03-09T12:58:49.954861",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "20 days VaR based on given 1 day VaR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d4604007",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:49.977305Z",
     "iopub.status.busy": "2025-03-09T12:58:49.976963Z",
     "iopub.status.idle": "2025-03-09T12:58:50.254314Z",
     "shell.execute_reply": "2025-03-09T12:58:50.253198Z"
    },
    "papermill": {
     "duration": 0.287171,
     "end_time": "2025-03-09T12:58:50.256186",
     "exception": false,
     "start_time": "2025-03-09T12:58:49.969015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VaR of 20days [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]\n",
      "20 day VaR @ 95% confidence: nan\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "var_array = []\n",
    "num_days = int(20)\n",
    "for x in range(1, num_days+1):\n",
    "    var_array.append(np.round(var_1dl * np.sqrt(x),2))\n",
    "\n",
    "print('VaR of 20days',var_array)\n",
    "print(str(x) + \" day VaR @ 95% confidence: \" + str(np.round(var_1dl * np.sqrt(x),2))) \n",
    "plt.xlabel(\"Day #\")\n",
    "plt.ylabel(\"Max portfolio loss (USD)\")\n",
    "plt.title(\"Max portfolio loss (VaR) over 20-day period\")\n",
    "plt.plot(var_array, \"r\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3fd8110",
   "metadata": {
    "papermill": {
     "duration": 0.007663,
     "end_time": "2025-03-09T12:58:50.271626",
     "exception": false,
     "start_time": "2025-03-09T12:58:50.263963",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here, we have 95% confidence to say that our 1\n",
    "million dollars portfolio will not lose more than $71,335.26\n",
    "within 20 days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5331c7ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-09T12:58:50.288690Z",
     "iopub.status.busy": "2025-03-09T12:58:50.288283Z",
     "iopub.status.idle": "2025-03-09T12:58:50.468605Z",
     "shell.execute_reply": "2025-03-09T12:58:50.467368Z"
    },
    "papermill": {
     "duration": 0.190678,
     "end_time": "2025-03-09T12:58:50.470364",
     "exception": false,
     "start_time": "2025-03-09T12:58:50.279686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VaR of 40days [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]\n",
      "40 day VaR @ 95% confidence: nan\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "var_array = []\n",
    "num_days = int(40)\n",
    "for x in range(1, num_days+1):\n",
    "    var_array.append(np.round(var_1dl * np.sqrt(x),2))\n",
    "\n",
    "print('VaR of 40days',var_array)\n",
    "print(str(x) + \" day VaR @ 95% confidence: \" + str(np.round(var_1dl * np.sqrt(x),2))) \n",
    "plt.xlabel(\"Day #\")\n",
    "plt.ylabel(\"Max portfolio loss (USD)\")\n",
    "plt.title(\"Max portfolio loss (VaR) over 40-day period\")\n",
    "plt.plot(var_array, \"r\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96030af8",
   "metadata": {
    "papermill": {
     "duration": 0.008029,
     "end_time": "2025-03-09T12:58:50.486766",
     "exception": false,
     "start_time": "2025-03-09T12:58:50.478737",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here, we have 95% confidence to say that our 1 million dollars portfolio will not lose more than $100883.29 within 40 days"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7852f214",
   "metadata": {
    "papermill": {
     "duration": 0.007977,
     "end_time": "2025-03-09T12:58:50.503237",
     "exception": false,
     "start_time": "2025-03-09T12:58:50.495260",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visulization Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11add83b",
   "metadata": {
    "papermill": {
     "duration": 0.008561,
     "end_time": "2025-03-09T12:58:50.520073",
     "exception": false,
     "start_time": "2025-03-09T12:58:50.511512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.049507,
   "end_time": "2025-03-09T12:58:51.249952",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-09T12:58:41.200445",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
